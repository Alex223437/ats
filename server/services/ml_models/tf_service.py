import os
import pickle
import numpy as np
import pandas as pd
import tensorflow as tf
from data.data_preprocessing import prepare_features_for_ml

MODEL_PATH = "services/ml_models/models/tf_model.keras"
SCALER_PATH = "services/ml_models/models/tf_scaler.pkl"

try:
    tf_model = tf.keras.models.load_model(MODEL_PATH)
except Exception as e:
    tf_model = None
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TensorFlow –º–æ–¥–µ–ª–∏: {e}")

try:
    with open(SCALER_PATH, "rb") as f:
        tf_scaler = pickle.load(f)
except Exception as e:
    tf_scaler = None
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–µ–π–ª–µ—Ä–∞ TensorFlow: {e}")

def predict_tf(df: pd.DataFrame) -> str:
    if tf_model is None or tf_scaler is None or df.empty:
        print("‚ö†Ô∏è predict_tf: –º–æ–¥–µ–ª—å, —Å–∫–µ–π–ª–µ—Ä –∏–ª–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return None

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏—á–µ–π —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏
    X_scaled, _ = prepare_features_for_ml(df, tf_scaler)
    if X_scaled.shape[0] == 0:
        print("‚ö†Ô∏è predict_tf: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞")
        return None

    probs = tf_model.predict(X_scaled[-1:])
    pred_class = np.argmax(probs[0])
    print(f"üîÆ predict_tf raw prediction: {pred_class} (probs: {probs[0]})")

    if pred_class == 1:
        return "buy"
    elif pred_class == 2:
        return "sell"
    return "hold"