from server.database import SessionLocal
from datetime import datetime
from server.models.strategy import Strategy
from server.models.user import User
from server.models.trade_log import TradeLog
from server.services.strategy_service import StrategyService
from server.services.broker_factory import get_alpaca_api
from server.data.market_data import MarketData
from sqlalchemy.orm import Session


def run_strategy(strategy: Strategy, db: Session):
    user = strategy.user
    api = get_alpaca_api(user)

    # –ë–µ—Ä–µ–º —Ç–∏–∫–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tickers = [stock.ticker for stock in user.stocks]
    for ticker in tickers:
        print(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é '{strategy.title}' –¥–ª—è {ticker}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = MarketData.download_data(ticker, from_date="2024-01-01", to_date=str(datetime.today().date()))
        if data is None or data.empty:
            continue

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        result = StrategyService.apply_saved_strategy(data, strategy.id, db=db)
        if result is None or result.empty:
            continue

        last_row = result.iloc[-1]
        print(last_row)

        # –ü–æ–∫—É–ø–∫–∞
        if last_row.get("Buy_Signal"):
            _log_and_trade(api, db, user, ticker, "buy", strategy)

        # –ü—Ä–æ–¥–∞–∂–∞
        elif last_row.get("Sell_Signal"):
            _log_and_trade(api, db, user, ticker, "sell", strategy)
        
        else:
            print('neither buy or sell')


def _log_and_trade(api, db, user: User, ticker: str, action: str, strategy: Strategy):
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥
    log = TradeLog(
        user_id=user.id,
        strategy_id=strategy.id,
        ticker=ticker,
        action=action,
        price=0,  # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        status="executed"
    )
    db.add(log)
    db.commit()

    print(f"üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {action.upper()} {ticker} –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy.title}")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º Auto)
    if strategy.automation_mode == "Automatic":
        try:
            api.submit_order(
                symbol=ticker,
                qty=1,  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ
                side=action,
                type="market",
                time_in_force="gtc"
            )
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ {action.upper()} {ticker}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ä–¥–µ—Ä–∞: {e}")

def check_and_run_strategies():
    print("‚è± –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    db = SessionLocal()
    try:
        active = db.query(Strategy).filter(Strategy.is_enabled == True).all()
        for strategy in active:
            run_strategy(strategy, db)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
    finally:
        db.close()